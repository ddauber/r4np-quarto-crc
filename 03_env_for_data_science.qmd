# Environments for Data Science
An environment for data science is a programming language. The choice of a programming language (such as R, python, julia, and others) defines an ecosystem in which to operate a data science project. As data scientists we are fortunate the variety of these programming languages exist! While one programming language may be preferable in some contexts than others, we should pick the tool that is suited to gain the best insight from that for what we need in the moment.

This textbook takes a neutral approach on *which* language makes the most sense (admittedly both of us have our favoRites). Rather, let’s examine differences between common environmental data science languages using the power of chatGPT.

Generative artificial intelligence tools (such as [chatGPT](https://chat.openai.com/) and others) have rapidly transformed our daily lives (especially post 2023) and how we interact with the internet. For scientific research, disclosing the use of generative AI tools is recognized as maintaining scientific integrity (CITE sources from 2/2/2024).

Generative AI is an offshoot of machine learning methods from data science, and so provides a good case study to examine differences environments for data science.

As described in the last chapter, half the battle is loading in data into your computer and connecting up these datasets. A typical next step is exploratory data analysis. If we chose R, a prompt to chatGPT might be the following @fig-jz-chatgpt:

![An innocent question to chatGPT.](images/03_env_data_sci/jz_chatgpt.png){width=90% #fig-jz-chatgpt}

@fig-chatgpt-r shows its response, which (admittedly) a well-organized (and documented!) explanation of starter code:

![How chatGPT responded to our question using R.](images/03_env_data_sci/chatgpt_r.png){width=90% #fig-chatgpt-r}

The provided code loads up the correct library (tidyverse), converts the time to the POSIXct format (which makes working with dates and times easier) and generates a well-labeled plot. Not too shabby. We would also award extra credit points for using the tidyverse pipe (`%>%`) in the code, but perhaps not full credit because of the adoption of the [base R pipe](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) (`|>`). 

Now let’s give the same prompt with python (@fig-chatgpt-python):

![How chatGPT responded to our question with python.](images/03_env_data_sci/chatgpt_python.png){width=90% #fig-chatgpt-python}
Examining the code seems like a beat for beat rehash of the same code with R, but with just python (almost like [Star Wars: The Force Awakens](https://www.vox.com/2015/12/26/10664834/star-force-awakens-derivative), but don’t @ us!). There are some differences to note:

Similar to R, in python libraries are defined at the start of the code (with import).  However, those libraries need to be referred to when you wish to use a command from a particular library (e.g. the function to_datetime is a function in the pandas library).  Thankfully in python you can abbreviate the names as pd - whichever makes sense for you.  (NOTE: In R if you only want to use a particular function in a library, then refer to it with the double colon (::, e.g. PACKAGE::FUNCTION)  ).
Python doesn’t have the native pipe operator (|>) like R.
The assignment operator is equals (=) versus a left facing arrow (<---).

We finally asked julia, a newer language that is faster to do the same as we did with `R` and python:

![How chatGPT responded to our question using julia.](images/03_env_data_sci/chatgpt_julia.png){width=90% #fig-chatgpt-julia}

Can you spot the differences (and similarities) with the Julia output compared to R or python? For all practical purposes, it comes down to preference - which one you are more familiar with.

So which should you choose?  `R` is good for statistics and data manipulation. There is a strong user base in ecology (point to references). At the same time, the `tidyverse` language (and associated packages) have been developed over the past decade with several well-supported items. It is not hard to find instances of how to do something in R using tidyverse with an ecological bent (link to the NEON webpages as well).

The same case could be made for python - which at its core is a programming language (R was initially designed for statistical analysis which has morphed into wider applications for data science). If you are familiar with C or C++, python may feel very familiar to you.

julia is a very promising language that is growing in popularity LINK. It does provide power like python, and speed like C [need a link for this].  We believe there is longevity in this language, although it has a smaller user community in the environmental sciences.

A non open-source alternative to programming is MATLAB, which for the authors was the first foray into programming languages in graduate school. This software is used in engineering and industrial applications. Because it is a commercial and proprietary language, it is not as translatable for open science applications. An open source alternative (Octave) is also available, but it doesn’t have as much usable features that one might find in MATLAB.

We believe that the best position to take is one of openness to learning new tools and software as your needs will invariably evolve.  It is okay to dabble! John started out using Matlab, but transitioned to Octave because of the open-source capabilities, but it was hard to support sustained research projects.  Making a clean break to work with R (at the same time as the tidyverse was growing in use) provided a fresh start to learn new tools and techniques for managing data.  Naupaka learned C++ in high school, then didn’t program much until grad school, where I learned perl in a genomics course. When I started analyzing my own microbial community ecology data for my dissertation, I needed the statistical tools only available in R so started teaching myself. Then along the way I taught myself SQL, bash, python, and a little bit of lisp.

## The future: why choose?
The future of siloing yourself in an particular programming language is becoming less relevant with the proliferation of online tools such as quarto, jupyter notebooks, and google colab.  (Provide links).  These alternatives borrow strengths from each language, allowing you to seamlessly integrate them all together. Although the nuances between languages will always be a challenge (especially if you do the code switching between them!), this seems like a promising future development.

