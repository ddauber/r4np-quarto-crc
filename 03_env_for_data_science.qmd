# Environments for Data Science {#sec-03environments}

You have data from an experiment, or perhaps have accessed data from an ecological network such as NEON.  You are now ready to explore your data through visualization, conduct statistical tests, and perhaps increase the explanatory power beyond just the data collection itself. Your next step is to choose a computational environment for analysis. As described in the @sec-02data, half the battle is loading in data into your computer and connecting up these datasets. A typical next step is exploratory data analysis.

This chapter provides contrasts three of the most common programming languages for data science when faced with a common task. Borrowing language from ecology, an environment for data science as an interconnected system with a particular programming language as the foundation. Just like natural environments, environments for data science differ depending on the programming language. Let's begin.



## Choosing different languages
We define an environment for data science as a programming language. Examples of programming languages include R\index{R}, python\index{python}, julia\index{julia} briefly described in @tbl-dst-languages



::: {#tbl-dst-languages}

| Name| First Available | Description | Reference |
|----|----|------------|------|
| R| 1993 | Started as a statistical programming language. Contributed packages allow for the extension of the base language into other data science programs. | [https://www.r-project.org/](https://www.r-project.org/) |
| python | 1991 | Started as a computer programming language that supports object-oriented programming. Similar to R, contributed modules extend the core python language to machine learning, data visualization, and other areas of science, engineering, and mathematics. | [https://www.python.org/](https://www.python.org/) |
| julia | 2012 | with the goal of combining speed and parallel language operation, essentially taking the best aspects of different programming languages and combining into one [@alWhyWeCreated]. | [https://julialang.org/](https://julialang.org/)  |

Comparison of different programming languages used in data science.

::: 


As data scientists we are fortunate the variety of these programming languages exist! While one programming language may be preferable in some contexts than others, we should pick the tool that is suited to gain the best insight from that for what we need in the moment.

This textbook takes a neutral approach on *which* language makes the most sense (admittedly both of us have our favo**R**ites). Rather, let’s examine differences between common environmental data science languages using the power of chatGPT.

Generative AI is an offshoot of machine learning methods from data science, and so provides a good case study to examine differences environments for data science. These artificial intelligence tools (e.g. [chatGPT](https://chat.openai.com/) and others) have rapidly transformed our daily lives (especially post 2023) and how we interact with the internet. For scientific research disclosing the use of generative AI tools is recognized as maintaining scientific integrity [@bocktingLivingGuidelinesGenerative2023; @BestPracticesGenerative; @bertoloGenerativeAIScientific2024]. Let's use them here to contrast how the different environments in @tbl-dst-languages produce output.



 If we chose R, a prompt to chatGPT might be the following @fig-jz-chatgpt:


::: {#fig-jz-chatgpt}

![](images/03_env_data_sci/jz_chatgpt.png){width=90%  fig-alt="Screenshot of a prompt to chatGPT saying write code to plot halfhourly temperature data using R with tidyverse syntax."}

An innocent question to chatGPT.
:::




@fig-chatgpt-r shows its response, which (admittedly) a well-organized (and documented!) explanation of starter code:


::: {#fig-chatgpt-r}

![](images/03_env_data_sci/chatgpt_r.png){width=90% fig-alt="chatGPT output of a prompt saying write code to plot halfhourly temperature data using R with tidyverse syntax."}

How chatGPT responded to our question using R.
:::


The provided code loads up the correct library (tidyverse), converts the time to the POSIXct format (which makes working with dates and times easier) and generates a well-labeled plot. Not too shabby. Based on your knowledge of R, we would also award extra credit points for using the tidyverse pipe (`%>%`) in the code, but perhaps not full credit because of the adoption of the [base R pipe](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) (`|>`). 

Now let’s give the same prompt with python (@fig-chatgpt-python):

::: {#fig-chatgpt-python}

![](images/03_env_data_sci/chatgpt_python.png){width=90% fig-alt="chatGPT output of a prompt saying write code to plot halfhourly temperature data using python."}

How chatGPT responded to our question with python.
:::

Examining the code seems like a beat for beat rehash of the same code with R, but with just python (almost like [Star Wars: The Force Awakens](https://www.vox.com/2015/12/26/10664834/star-force-awakens-derivative), but don’t @ us!). There are some differences to note:

- Similar to R, in python libraries are defined at the start of the code (with import).  However, those libraries need to be referred to when you wish to use a command from a particular library (e.g. the function to_datetime is a function in the pandas library).  Thankfully in python you can abbreviate the names as pd - whichever makes sense for you.  (NOTE: In R if you only want to use a particular function in a library, then refer to it with the double colon (::, e.g. PACKAGE::FUNCTION)  ).
- Python doesn’t have the native pipe operator (|>) like R.
The assignment operator is equals (=) versus a left facing arrow (<---).

We finally asked chatGPT the same prompt, this time with julia (@fig-chatgpt-julia):

::: {#fig-chatgpt-julia}

![](images/03_env_data_sci/chatgpt_julia.png){width=90% fig-alt="chatGPT output of a prompt saying write code to plot halfhourly temperature data using julia."}

How chatGPT responded to our question using julia.
:::


Can you spot the differences (and similarities) with the Julia output in @fig-chatgpt-julia compared to R (@fig-chatgpt-r) or Python (@fig-chatgpt-python)? For all practical purposes, it comes down to preference - which one you are more familiar with.

So which should you choose?  R is good for statistics and data manipulation. There is a strong user base in ecology [@laiEvaluatingPopularityEcology2019]. At the same time, the tidyverse and associated packages have been developed with data science in mind [@wickhamDataScienceImport2017; @wickhamWelcomeTidyverse2019].

The same case could be made for python - which at its core is a programming language (R was initially designed for statistical analysis which has morphed into wider applications for data science). If you are familiar with C or C++, python may feel very familiar to you.

julia is a very promising language with a user base growing in biology [@roeschJuliaBiologists2023].  We believe there is longevity in this language, although it has a smaller user community in the environmental sciences.

A non open-source alternative to programming is [MATLAB](https://www.mathworks.com/products/matlab.html), which for the authors was the first foray into programming languages in graduate school. This software is used in engineering and industrial applications. Because it is a commercial and proprietary language, it is not as translatable for open science applications. [Octave](https://octave.org/) is an open-source alternative as MATLAB. From John's experience working with Octave, at the time it was a good substitute for MATLAB, but it was hard to share code with his collaborators in biology.

## Our recommendations
We believe that the best position to take is one of openness to learning new tools and software as your needs will invariably evolve.  It is okay to dabble! John started out using MATLAB, then transitioned to Octave because it was open-source. He then moved to work with R (at the same time as the tidyverse was growing in use) as a fresh start to learn new tools and techniques for managing data.  

Naupaka learned [C++](https://en.wikipedia.org/wiki/C%2B%2B) in high school, then didn’t program much until grad school, where I learned [perl](https://www.perl.org/) in a genomics course. When I started analyzing my own microbial community ecology data for my dissertation, I needed the statistical tools only available in R so started teaching myself. Then along the way I taught myself SQL, [bash](https://www.gnu.org/software/bash/), python, and a little bit of [lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language).


## The future: why choose?
Our experiences with programming languages reflect the times we developed as scientists and the growth of different languages. While we can't predict the future, but we can safely say at some point you may use programming language not even mentioned here. Our graduate school advisors programmed in [C](https://en.wikipedia.org/wiki/C_(programming_language)) or [Fortran](https://fortran-lang.org/) - which while still in use, would not what we would recommend to our students as a first programming language. Organisms in a biological environment adapt and evolve to change - and so will you.


Siloing yourself in an particular programming language is becoming less relevant with the proliferation of online tools such as [quarto](https://quarto.org/), [jupyter notebooks](https://jupyter.org/), and [google colab](https://colab.research.google.com/). These alternatives borrow strengths from each language. We recognize that code switching can be challenge [@ComparisonProgrammingLanguages2024]. The best environments for data science shares a common theme: they are built to support your success and longevity.

## Exercises

1. Make an inventory of programming languages you have learned.

2. Interview your advisor about what programming languages they used, and what they would recommend.

3. Give a simple table and give a prompt to import in as a csv and plot with a programming language. Compare output.  Is it what you would expect?
